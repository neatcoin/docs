(self.webpackChunkneatcoin_docs=self.webpackChunkneatcoin_docs||[]).push([[63],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1427:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o=["components"],l={id:"mimblewimble",title:"Mimblewimble Privacy Transaction"},s={unversionedId:"mimblewimble",id:"mimblewimble",isDocsHomePage:!1,title:"Mimblewimble Privacy Transaction",description:"This article describes specific aspects of how Mimblewimble might be incoperated in Neatcoin.",source:"@site/docs/mimblewimble.md",sourceDirName:".",slug:"/mimblewimble",permalink:"/docs/mimblewimble",editUrl:"https://github.com/neatcoin/neatcoin.org/edit/master/website/docs/docs/mimblewimble.md",version:"current",frontMatter:{id:"mimblewimble",title:"Mimblewimble Privacy Transaction"},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/docs/"},next:{title:"Nomo DNS",permalink:"/docs/nomo"}},c=[{value:"Status",id:"status",children:[]},{value:"Crypto library",id:"crypto-library",children:[]},{value:"Mimblewimble",id:"mimblewimble",children:[]},{value:"Proof-of-stake",id:"proof-of-stake",children:[]},{value:"Slashing",id:"slashing",children:[]}],p={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This article describes specific aspects of how Mimblewimble might be incoperated in Neatcoin."),(0,r.kt)("h2",{id:"status"},"Status"),(0,r.kt)("p",null,"Things on this page has not yet been implemented."),(0,r.kt)("h2",{id:"crypto-library"},"Crypto library"),(0,r.kt)("p",null,"The project does not aim at writing any base-level crypto\nlibraries. We use whatever is available at hands. This means:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Curve25519 for all Mimblewimble transaction handlings."),(0,r.kt)("li",{parentName:"ul"},"Bls12_381 for proof-of-stake pairing operations.")),(0,r.kt)("p",null,"Readers may notice that we do not use the same crypto as in Grin\n(which uses secp256k1). Thanks to the dalek and schnorrkel project in\nRust, curve25519 has already got sufficient support for running\noperations needed for Mimblewimble."),(0,r.kt)("h2",{id:"mimblewimble"},"Mimblewimble"),(0,r.kt)("p",null,"The transaction format and all mimblewimble operations will mostly\nresemble what looks like in Grin."),(0,r.kt)("h2",{id:"proof-of-stake"},"Proof-of-stake"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Coinbase")," output and kernel feature is removed. In replacement,\nwe introduce two new features ",(0,r.kt)("inlineCode",{parentName:"p"},"Stake")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Reward"),"."),(0,r.kt)("p",null,"All proof-of-stake data structures live in a place outside of\nMimblewimble. We can think of them as a ",(0,r.kt)("strong",{parentName:"p"},"validator set")," with a ",(0,r.kt)("em",{parentName:"p"},"BLS\npublic key")," and ",(0,r.kt)("em",{parentName:"p"},"current rewards"),"."),(0,r.kt)("p",null,"Both the ",(0,r.kt)("inlineCode",{parentName:"p"},"Stake")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Reward")," kernel feature will have a reference to\na ",(0,r.kt)("em",{parentName:"p"},"BLS public key"),"."),(0,r.kt)("p",null,"If an output contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"Stake")," feature, it initiates an intention\nto validate. It reveals the staker's BLS public key, but does not\nreveal the amount. In addition to the normal rangeproof to make sure\nthe amount is a non-negative value, an additional rangeproof is\ncarried out to make sure the amount is greater than ",(0,r.kt)("em",{parentName:"p"},"64\nNEAT"),". Otherwise, the block is considered invalid."),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"Stake")," outputs are immediately forbidden to be used as inputs. At\nthe end of the block, their validator keys are added to the\nproof-of-stake validator set. We use the same strategy as in eth2 to\ngive all validators the same voting rights."),(0,r.kt)("p",null,"From this point on, the proof-of-stake functions exactly the same as\nEth2's beacon chain proof-of-stake specifications."),(0,r.kt)("p",null,"The proof-of-stake algorithm will accumate rewards. Upon reaching a\nthreshold, validators can send ",(0,r.kt)("inlineCode",{parentName:"p"},"Reward")," inputs on the Mimblewimble\nside to mint those coins to be usable."),(0,r.kt)("p",null,"The proof-of-stake side has specific transactions for sending\nattestations and handling slashing reportings. Those transactions are\nnot in any way related to Mimblewimble transactions."),(0,r.kt)("p",null,"Either voluntarily or forced, a validator can exit staking. In this\ncase, the validator set state maintains the data until the exit\nperiod. After that, ",(0,r.kt)("inlineCode",{parentName:"p"},"Stake"),"-featured outputs are re-allowed to be used\nas other transaction's inputs."),(0,r.kt)("h2",{id:"slashing"},"Slashing"),(0,r.kt)("p",null,"A validator can be slashed if it malfunctions. In this case, rewards\ncan go negative. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Stake"),"-featured outputs will continue to be\nforbidden to be used even when the validator exits."))}u.isMDXComponent=!0}}]);